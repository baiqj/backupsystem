#!/usr/bin/python
import errno
import logging
import os
import sys
import shutil

from gitosis import repository
from gitosis import ssh
from gitosis import gitweb
from gitosis import gitdaemon
from gitosis import app
from gitosis import util

class BackupProp(util.RepoProp):
	name = "backup"
	post_update = os.path.join(os.path.dirname(__file__), 'post-update.template')

	def _get(self, config, reponame):
		return True

	def action(self, repobase, name, reponame, ignore):
		hooks_dir = os.path.join(repobase, name + '.git', 'hooks')
		path = os.path.join(hooks_dir, "tmp.post-update")
		open(path, 'w').write("""#!/bin/bash
. %s
N="$TODOdir/%s"
. %s
""" % (self.backup_cfg, name, self.post_update))

		os.chmod(path, 0744)
		os.rename(path, os.path.join(hooks_dir, "post-update"))

def init_cmd_repo(cfg, backup_cfg):
	prop = BackupProp()
	prop.backup_cfg = backup_cfg

	util.RepositoryDir(cfg, prop).travel()

class Main(app.App):
	def create_parser(self):
		parser = super(Main, self).create_parser()
		parser.set_usage('%prog [OPTS] backup_cfg')
		parser.set_description(
		'Update post-update hooks of backup cmd repos')
		return parser

	def handle_args(self, parser, cfg, options, args):
		try:
			(backup_cfg,) = args
		except ValueError:
			parser.error('Missing argument /path/to/backup_cfg.')

		log = logging.getLogger('gitosis.run_hook.backup-admin')

		log.info('init_cmd_repo with backup_cfg="%s"', backup_cfg)
		init_cmd_repo(cfg, backup_cfg)
		log.info('Done.')


if __name__ == '__main__':
	Main.run(Main)
